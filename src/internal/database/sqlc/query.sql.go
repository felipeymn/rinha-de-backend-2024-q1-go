// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO transactions (
  account_id, amount, operation, description
) 
VALUES ($1,$2,$3,$4)
`

type CreateTransactionParams struct {
	AccountID   pgtype.Int4
	Amount      int32
	Operation   NullOperationEnum
	Description string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.Exec(ctx, createTransaction,
		arg.AccountID,
		arg.Amount,
		arg.Operation,
		arg.Description,
	)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT balance, account_limit
FROM accounts
WHERE id = $1
`

type GetAccountRow struct {
	Balance      pgtype.Int4
	AccountLimit pgtype.Int4
}

func (q *Queries) GetAccount(ctx context.Context, id int32) (GetAccountRow, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i GetAccountRow
	err := row.Scan(&i.Balance, &i.AccountLimit)
	return i, err
}

const getTransactions = `-- name: GetTransactions :many
SELECT amount, operation, description, timestamp
FROM transactions
WHERE account_id = $1
ORDER BY timestamp DESC
LIMIT 10
`

type GetTransactionsRow struct {
	Amount      int32
	Operation   NullOperationEnum
	Description string
	Timestamp   pgtype.Timestamp
}

func (q *Queries) GetTransactions(ctx context.Context, accountID pgtype.Int4) ([]GetTransactionsRow, error) {
	rows, err := q.db.Query(ctx, getTransactions, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionsRow
	for rows.Next() {
		var i GetTransactionsRow
		if err := rows.Scan(
			&i.Amount,
			&i.Operation,
			&i.Description,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts 
SET balance = balance + $1 
WHERE id = $2 
RETURNING balance, account_limit
`

type UpdateAccountParams struct {
	Balance pgtype.Int4
	ID      int32
}

type UpdateAccountRow struct {
	Balance      pgtype.Int4
	AccountLimit pgtype.Int4
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (UpdateAccountRow, error) {
	row := q.db.QueryRow(ctx, updateAccount, arg.Balance, arg.ID)
	var i UpdateAccountRow
	err := row.Scan(&i.Balance, &i.AccountLimit)
	return i, err
}
